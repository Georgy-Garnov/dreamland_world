.apply(function() {
    if (.tmp.gtrig["onSpec"] == null)
	.tmp.gtrig["onSpec"] = .Array();

    .tmp.hints = .Map();
    .tmp.hints.context = .Array();
    
    // Формат сообщения: 
    // %1$C1 или %1$P1 - персонаж
    // %2$s - название доступного заклинания без кавычек('волш стрел' или 'легк раны')
    // %3$s - короткое название этого заклинания (волш или легк)
    
    // Контекст: персонаж стоит в самой первой комнате после архивариуса, откуда
    // отпадают чаще всего.
    .tmp.hints.context["bouncer"] = .List().add(
	"Набери {y{hcсмотреть{x ({y{hcсм{x), чтобы снова увидеть описание комнаты и ее содержимое.",
	"Если хочешь задать вопрос другим игрокам, набери команду {y{hcтреп всем привет!{x",
	"Набери команду {y{hcв{x (сокращенно от {y{hcвосток{x), чтобы переместиться в комнату на восток отсюда.",
	"Набери команду {y{hcсм роза{x, чтобы взглянуть на знак."
     );
     
    // Контекст: долго не набирали ни одной команды.
    .tmp.hints.context["idler"] = .List().add(
	"Если хочешь обратиться к другим игрокам, набери команду {y{hcтреп всем привет!{x, {yтреп мне нужна помощь{x",
	"Таблицу всех доступных действий покажет команда {y{hcкоманды{x.",
	"По многим командам и явлениям есть справка, например {y{hcсправка перемещение{x или {y{hc? квесты{x.",
	"Список выданных тебе заданий видно по команде {y{hcквест{x или {y{hcзадания{x.", // TODO smarter checks
	"Ходить по комнатам можно, вводя стороны света {y{hcс{xевер, {y{hcю{xг, {y{hcз{xапад, {y{hcв{xосток.",
	"Спуститься вниз в трюм или подняться наверх можно командами: {y{hcвн{xиз, {y{hcвв{xерх." // TODO smarter checks
    );
    
    // Контекст: стоит во 2й комнате где трап.
    .tmp.hints.context["walker"] = .List().add(
	"Если хочешь обратиться к другим игрокам, набери команду {y{hcтреп всем привет!{x, {yтреп мне нужна помощь{x",
	"Набери {y{hcидти трап{x, чтобы зайти на корабль.",
	"По многим командам и явлениям есть справка, например {y{hcсправка перемещение{x или {y{hc? квесты{x."
    );
    
     // Контекст: 1й реморт и дальше, показывать только эти подсказки, независимо
     // от поведения персонажа. 
     .tmp.hints.context["remorted"] = .List().add(
	 "Телосложение можно тренировать за квестовые очки (qp): {yтрен слож кп{x.",
	 "Информацию по умениям и заклинаниям покажут команды {y{hcумения{x и {y{hcзаклинания{x.",
	 "Команда {y{hcквест{x пригодится даже на фрегате.",
	 "Информацию о прожитых жизнях покажет команда {y{hcжизни{x.",
	 "Начальные параметры можно пересмотреть у лекаря, до погрузки на корабль." // TODO: smarter context for this one
     );
     
    // Контекст: только что умер (флаг (P)) и стоит в Часовне.
    .tmp.hints.context["death"] = .List().add(
	"Если тебя убили, набери {y{hcвзять все труп{x и {y{hcнадеть все{x.",
	"Доктор Кацман {y{hcвн{xизу отсюда обложит тебя защитными заклинаниями и подлечит перед новой битвой."
    );

    // Контекст: пустой инвентарь, трупа нет. TODO: аналог команды OUTFIT
    .tmp.hints.context["naked"] = .List().add(
    );
    
    // Контекст: труп со шмотом лежит в часовне.
    .tmp.hints.context["mycorpse"] = .List().add(
	"Все твои вещи в Часовне (на самом юге от дварфа). Набери {y{hcвзять все труп{x и {y{hcнадеть все{x."
    );
    
    // Контекст: роллит статы под лекарем
    .tmp.hints.context["munchkin"] = .List().add(
	"Набери {y{hcгов лекарь лекция{x, если хочешь подробнее узнать о параметрах.",
	"Набери {y{hcгов лекарь ловкость{x, чтобы узнать об этом параметре. Или прочти {y{hcсправка ловкость{x.",
	"Набери {y{hcгов лекарь поехали{x, чтобы начать осмотр, а потом отвечай на его вопросы: {y{hcгов лекарь нет{x или {yда{x.",
	"Иди на {y{hcю{xг, чтобы выйти отсюда. Прекратить уже начатый осмотр можно командой {y{hcгов лекарь да{x."
    );
    
    // Контекст: плохо со здоровьем.
    .tmp.hints.context["bleeder"] = .List().add(
	"Ты можешь всегда {y{hcсбежать{x из невыгодного боя, преследовать тебя не будут.",
	"Ляг {y{hcспать{x, чтобы быстрее восстановить здоровье. Лучше всего спать в Лазарете.",
	"Доктор в Лазарете полечит твои раны. Иди до упора на юг в трюме (или на юг и вниз на палубе)."
    );
    
    // Контекст: сражается, сражался недавно или же стоит в трюме где можно кого-то бить.
    .tmp.hints.context["fighter"] = .List().add(
	"Используй в бою доступные тебе умения: {yпинок муха{x или {yгрязь муха{x или {yподножка муха{x.",
	"Если ты уже сражаешься, цель заклинания или умения указывать не надо: {yпинок{x, {yк волш{x.",
	"Если лечь {y{hcспать{x после боя, можно быстрее восстановить очки здоровья и маны, и потом {y{hcпроснуться{x.",
	"Если по команде {y{hcзакл{x видишь доступные заклинания, выучи их у доктора Кацмана на юге отсюда."
    );

    // Контекст: персонажу доступен и разучен'magic missile' или 'cause light'.
    .tmp.hints.context["caster"] = .List().add(
	"Используй в бою доступные тебе заклинания: {yк '%2$s' муха{x или {yк %3$s паук{x.",
	"Можно начать бой с заклинания, указав ему цель: {yк %3$s паук{x.",
	"Заклинания, состоящие из двух слов, надо брать в кавычки: {y{hcк '%2$s'{x или сокращать {y{hcк %3$s{x.",
	"В бою указывать цель для заклинаний не обязательно: {y{hcк %3$s{x.",
	"Прочти 'справка {hhколдовать{x', чтобы узнать подробности о заклинаниях.",
	"Список всех доступных заклинаний покажут команды {y{hcзакл{xинания и {y{hcпрак{xтиковать.",
	"По каждому заклинанию есть статья справки, например, {y{hcсправ %2$s{x."
    );
    
    // Контекст: заклинания доступны но еще не выучены
    .tmp.hints.context["caster_newbie"] = .List().add(
	"Список всех доступных заклинаний покажут команды {y{hcзакл{xинания и {y{hcпрак{xтиковать.",
	"Выучить заклинания можно у доктора Кацмана в Лазарете, на юге от Трюма."
    );

    // Контекст: кто-то на корабле выдал задание.
    .tmp.hints.context["questor"] = .List().add(
	"Список выданных тебе заданий видно по команде {y{hcквест{x или {y{hcзадания{x.",
	"Дать кому-то в руки предмет можно командой {yдать {Dчто {Dкому{x, например, 'дать бровь повар'.",
	"Сказать реплику в слух, если тебя о чем-то спросили, можно так: {y{hcск помогу{x.",
	"Полезно смотреть на мобов и предметы, например, {yсм матрос{x, {yсм бочка{x.",
	"Положить один предмет в другой можно командой {yполож{xить {Dпредмет контейнер{x.",
	"Взять что-то из контейнера можно командой {yвз{xять, например, {yвз сухар пакет{x."
    );
    
    // Контекст: персонаж стоит рядом с учителем или тренером.
    .tmp.hints.context["learner"] = .List().add(
	"Узнать подробности о навыках можно командой {yумение{x, например {y{hcумение кинжал{x.",
	"Справка по каждому навыку подскажет, как им пользоваться. Например, {y{hcсправ волш стрел{x, {y{hcсправ пинок{x.",
	"Прочти 'справка {hhколдовать{x', чтобы научиться произносить заклинания. Например: {y{hcк 'волш стрел' муха{x.",
	"Команда {y{hcпрактиковать{x ({y{hcпрак{x) покажет, что ты можешь сейчас выучить. А {yпрак {Dкинжал{x повысит этот навык.",
	"Команда {y{hcтренировать{x покажет, какие параметры ты можешь повысить. А {yтрен {Dум{x повысит этот параметр.",
	"Прочти {y{hcсправка статы{x, чтобы узнать о параметрах. Сперва рекомендуется повысить мудрость, ум и сложение."
    );
     
     // Контекст: общий, для тех, кому нельзя присвоить никакой другой.
    .tmp.hints.context["general"] = .List().add(
	"По многим командам и явлениям есть справка, например {y{hcсправка квесты{x или {y{hc? смерть{x.",
	"Таблицу всех доступных действий покажет команда {y{hcкоманды{x.",
	"Используй {yкоманды показ {Dслово{x, чтобы увидеть все английские и русские синонимы какой-то команды.",
	"Команда {y{hcсправка{x без аргументов покажет, что стоит почитать в первую очередь.",
	"Список выданных тебе заданий видно по команде {y{hcквест{x или {y{hcзадания{x.",
	"Важные параметры персонажа показывает команда {y{hcсчет{x. Также прочти справка {hhстаты{x.",
	"Увидеть, что ты несешь в руках, можно по команде {y{hcинвентарь{x ({y{hcинв{x).",
	"Увидеть, что на тебе надето, можно по команде {y{hcэкипировка{x ({y{hcэк{x).",
	"Для перемещения по дополнительным выходам служит команда {yидти{x, например, {y{hcидти трап{x.",
	"Общаться с другими игроками можно в общих каналах, например, {y{hcболт мне нужна помощь{x.",
	"Если нужно обратиться к другому игроку приватом: {yговорить {Dимяигрока реплика{x",
	"Произнести реплику вслух так, чтобы ее услышали все рядом в комнате: {y{hcсказ ку-ку!{x",
	"Команды {y{hcумения{x и {y{hcзаклинания{x покажут списки доступных твоей профессии навыков.",
	"Выучить боевые умения можно в трюме у Эткина, а заклинания - у доктора Кацмана в лазарете.",
	"Потренируй свои параметры, набрав команду {y{hcтренировать{x рядом с учителем (Эткин или Кацман).",
	"Карта Фрегата, как и всех других зон, есть на нашем сайте: {hlhttps://dreamland.rocks/maps/ship.html{x.",
	"Прочти 'справка {hhколдовать{x', чтобы научиться произносить заклинания. Например: {y{hcк 'волш стрел' муха{x.",
	"Дать кому-то в руки предмет можно командой {yдать {Dчто {Dкому{x, например, 'дать бровь повар'.",
	"Надеть на себя вещь из инвентаря можно командой {yнадеть {Dчто{x, например, 'надеть шляпа' или 'надеть все'.",
	"Поднять предмет с пола можно командой {yвзять {Dчто{x, например, 'взять штаны' или 'взять все'."
     );
    
    // Подобрать доступное заклинание и вернуть его имя.
    .tmp.hints.myspell = function(ch) {
	if (.Skill("magic missile").usable(ch))
	    return "волш стрела";
	if (.Skill("cause light").usable(ch))
	    return "легк раны";
	return null;
    };

    // Подобрать доступное заклинание и вернуть его сокращенное имя.
    .tmp.hints.myspell_short = function(ch) {
	if (.Skill("magic missile").usable(ch))
	    return "волш";
	if (.Skill("cause light").usable(ch))
	    return "легк";
	return null;
    };

    // Подобрать доступное заклинание и вернуть его разученность.
    .tmp.hints.myspell_learned = function(ch) {
	if (.Skill("magic missile").usable(ch))
	    return .Skill("magic missile").learned(ch);
	if (.Skill("cause light").usable(ch))
	    return .Skill("cause light").learned(ch);
	return null;
    };
    
    // Найти труп этого персонажа в часовне.
    .tmp.hints.mycorpse = function(ch) {
	var room;
	
	room = .get_room_index(40025);
	for (obj in room.items)
	    if (obj.item_type == .tables.item_table.pc_corpse)
		if (obj.owner == ch.name)
		    return obj;
	return null;
    };
    
    // Выбор названия контекста в зависимости от состояния персонажа.
    .tmp.hints.getContextName = function(ch) {
	var teachers;
	
	// Ремортнутый.
	if (ch.remort_count > 0 && !ch.is_immortal() && ch.name != "Tahi")
	    return "remorted";
	    
	// Стоит в самой 1й комнате (и тупит).
	if (ch.in_room.vnum == 40100)
	    return "bouncer";
	    
	// Роллит статы под лекарем.
	if (ch.in_room.vnum == 40002)
	    return "munchkin";
	    
	// Стоит во 2й комнате. 
	if (ch.in_room.vnum == 40101 && .chance(90))
	    return "walker";
	    
	// Только что убили.
	if (ch.last_death_time > 0)
	    return "death";
	    
	if (ch.carrying == null && .chance(70)) {
	    var corpse;
	    
	    corpse = mycorpse(ch);
	    if (corpse == null || corpse.contains == null)
		return "death"; // TODO: change to 'naked' when outfit cmd is here
	    else
		return "mycorpse";
	}
	
	// Стоит в часовне без вещей, а (P) мог уже и спать.
	if (ch.in_room.vnum == 40025 && ch.carrying == null)
	    return "death";
    
	// Тупит слишком долго, шанс 10% на каждую минуту без ввода команд.
	if (.chance(10 * ch.timer))
	    return "idler";
	    
	// Плохо со здоровьем.
	if (ch.hit < ch.max_hit / 2 && .chance(50))
	    return "bleeder";

	// Стоит в трюме или сражается. Кастеры видят подсказки по заклам.
	if (ch.in_room.vnum >= 40014 && ch.in_room.vnum <= 40019
	     || ch.fighting != null)
	{
	    var spell;
	    spell = myspell_learned(ch);
	
	    if (spell == null)
		return "fighter";
	    else if (spell < 2 && .chance(90))
		return "caster_newbie";
	    else if (.chance(70))
		return "caster";
	    else
		return "fighter";
	}	 
	
	// Стоит в клетке рядом с учителем или тренером.
	teachers = ch.in_room.ppl.filter(function() { 
	    return is_npc() && (hasOccupation("trainer") || hasOccupation("practicer"));
	});
	if (teachers.size() > 0)
	    return "learner";

	// Вывод команды 'quest' непустой, т.е. есть задание.
	if (.tmp.quest != null && .tmp.quest.newinfo != null)
	    if (.chance(50) && .tmp.quest.get_info(ch, "") != "")
		return "questor";
	    
	// Недавно сражался, с некоторой вероятностью.
	if (ch.last_fought != null && .chance(50))
	    return "fighter";
	    
	// Общие подсказки.
	return "general";
    };
    
    // Как часто спамить. 15 - раз в минуту, 30 - раз в две минуты и т.д.
    .tmp.hints.getChance = function(ch) {
	var idle;
	
	idle = .min(2, ch.timer);
	if (ch.remort_count > 0)
	    idle = 0;
	    
	return 45 - idle * 15;
    };
    
    // Глобальный триггер onSpec вызывается для всех PC раз в 4 секунды.
    .tmp.gtrig["onSpec"]["hints"] = function(ch) {
	var chance, ctxName, ctx, message, history;
	var i, n, total_weight, weights, current_weight;
	
	// Спамить только персонажам.
	if (ch.is_npc())
	    return;
	
	// Наша служба и опасна и трудна.
	if (ch.name == "Zaleshanin")
	    return;
	    
	// Спамить только в начальной зоне.
	if (ch.in_room == null || ch.in_room.area.filename != "ship.are")
	    return;

	// Спамить раз в минут(ы), в зависимости от того, когда последний раз
	// вводили команды.
	chance = .tmp.hints.getChance(ch);
	if (.number_range(1, chance) != 1)
	    return;
	
	// Выбрать название контекста для персонажа.
	ctxName = .tmp.hints.getContextName(ch);
	if (ctxName == null)
	    return;
	
	// Найти список подсказок для этого контекста.
	ctx = .tmp.hints.context[ctxName];
	if (ctx == null || ctx.size() == 0)
	    return;

	// Инициализировать поля персонажа, где запоминается история подсказок.
	if (ch.hints == null)
	    ch.hints = .Array();
	if (ch.hints[ctxName] == null)
	    ch.hints[ctxName] = .List();
	
	// Найти случайную подсказку с учетом истории: чем недавнее мы видели
	// подсказку, тем меньше шанс увидеть ее сейчас.
	weights = .Array();
	total_weight = 0;
	history = ch.hints[ctxName];
	// Расчет веса каждой подсказки и суммарного веса.
	for (i = 0; i < ctx.size(); i=i+1) {
	    var weight, how_long_ago;
	    
	    // Вес 10 если никогда не видели подсказку.
	    // Чем "свежее" она в истории запомненных, тем меньше вес.
	    how_long_ago = history.find_reverse(i);
	    if (how_long_ago < 0)		    
		weight = 10;
	    else
		weight = .min(10, 1 + how_long_ago);
		
	    weights[i] = weight;
	    total_weight = total_weight + weight;
	}

	// Выбор случайного веса n.		
	n = .number_range(1, total_weight);
	current_weight = 0;
	message = null;
	// Поиск номера подсказки, соответствующей этому случайному весу.
	for (i = 0; i < weights.size(); i=i+1) {
	    current_weight = current_weight + weights[i];
	    if (n <= current_weight) {
		message = ctx.at(i);
		break;
	    }
	}
	 
	if (message == null)
	    return;
	
	// Форматирование и вывод результата.
	ch.act("[{cПодсказка{x] " + message, ch, .tmp.hints.myspell(ch), .tmp.hints.myspell_short(ch));

	// Запомнить на персонаже, какой номер подсказки ему выводили в этом контексте.
	history.push_back(i);
	// Ограничить размер истории 10ю последними номерами.
	for (; history.size() > 10; )
	    history.pop_front();
    };
})